1. E.F.Code 박사가 언급한 일반 집합 연산자와 순수 관계연산자를 SQL 구문에 대입한 아래의
  내용의 빈칸을 완성하시오
   1) Project
   2) Select

   SELECT   COL1, COL2  ------> (1) 
   FROM SQLD_31_01     ------> (2)
   WHERE 1=1
   AND COL1 = 'TEST'
   MINUS                    ------>  DIFFERENCE 
   SELECT   COL1, COL2  
   FROM SQLD_31_02
   WHERE 1=1
   AND COL1 = 'TEST2' ;


2. 아래의 쿼리의 결과를 적으시오.
   -> 문제 데이터와 SQL 에 대해서 정확하게 복원이 안됨.일단 아래 sql 인 경우는 결과는 아래와 같음

    EMP_ID      NAME      MANAGER_ID
    ---------------------------------------
    1             KING        NULL
    2             KEVIN       1
    3             SCOOT      2

    SELECT LPAD('**', (LEVEL-1) * 2 , '  ') ||EMP_ID AS T_EMP
             , NAME
    FROM SQLD_31_2 
    WHERE 1=1
    AND EMP_ID <> 3
    START WITH EMP_ID =3
    CONNECT BY EMP_ID = PRIOR MANAGER_ID;

<< 확인 테이블 처럼 작성 후 (EMP_ID <> 3 포함) 위의 쿼리를 수행하면 아래 처럼 나옴.>
T_EMP NAME
------------------
**2     kevin
  **1   king

<< WHERE 조건절의 EMP_ID <> 2 라고 하면 >>
T_EMP   NAME
------------------
3         scoot 
 **1     king


<<확인 테이블>>
drop table sqld_31_2;
create table sqld_31_2 
( 
  emp_id number,  
  name varchar2(30), 
  manager_id number 
  );
  
insert into sqld_31_2 values (1,'king',null);
insert into sqld_31_2 values (2,'kevin',1);
insert into sqld_31_2 values (3,'scoot',2);



3. ORACLE 에서 아래의 결과 처럼 정렬을 하고 싶을 때 빈칸을 완성하시오
   ->  NULLS LAST

<SQL>
  SELECT C1 , C2 
  FROM T1
  ORDER BY C1 , C2  DESC  (     ) ;

<RESULT>
------------
C1   C2 
------------
1     X
2     Y
2     NULL
3     A
4     B    


4. 아래의 두개의 SQL은 결과가 같은 SQL 이다. 두번째 SQL을 완성하시오
    -> CROSS JOIN

<SQL 1>

SELECT A.COL1, B.COL2
FROM TAB_A , TAB_B
WHERE 1=1;

<SQL 2>
SELECT A.COL1, B.COL2
FROM TAB_A  (             ) TAB_B
WHERE 1=1;


5. SELECT (100 + NULL) FROM T1 의 결과는?
   -> NULL
   * 5번의 문제 좀더 자세히 아는분 있나요? 아예 생각이 안나네요.^^;;;;


6. 아래의 결과처럼 나오게 하는 아래 SQL 을 완성하시오
    -> LAG

<SQL>
SELECT NAME, SALARY, 
          (     ) (SALARY) OVER( ORDER BY SALARY) AS BEFORE_SALARY
FROM SQLD_31_6

<RESULT> 
NAME SALARY BEFORE_SALARY
----------------------------------
A         300        NULL
B         1000       300
C         1500      1000


7. 아래 데이터가 있을 때 SQL 을 수행했을때의 결과를 적으시오
    -> 3

<데이터>
SQLD_31_7
------------
C1  C2
------------
A      1
B      2
B      3
C      4
C      5
C      6
D      7

<SQL>
SELECT COUNT(*)
FROM SQLD_31_7
GROUP BY C1
HAVING COUTN(*) > 2;


8. 아래 SQL 을 수행하였을 때 나오는 결과의 빈칸을 채우시오
     -> 6, 9400, 5, 10875

<SQL>
SELECT
        CASE GROUPING(DNAME) WHEN 1 THEN 'All Departments' ELSE DNAME END AS DNAME,
        CASE GROUPING(JOB)   WHEN 1 THEN 'All Jobs' ELSE JOB END AS JOB,
        COUNT(*) "Total Emp",
        SUM(SAL) "Total Sal"
FROM EMP, DEPT
WHERE DEPT.DEPTNO = EMP.DEPTNO
GROUP BY ROLLUP (DNAME, JOB);

결과 --> 376 페이지와 동일